#include <stdlib.h>
#include <stdio.h>
#include <TAxis.h>
#include <TCanvas.h>
#include <TColor.h>
#include <TF1.h>
#include <TFile.h>
#include <TGraph.h>
#include <TH1.h>
#include <TLegend.h>
#include <TROOT.h>
#include <TString.h>
#include <TTree.h>

void create_plots(Int_t be)
{
	const int nos=9;
	const int nop=16;

	char e0t0[300];
	char e1t1[300];
	char ttcm0[300];
	char ttcm1[300];
	char s3de[300];
	char s3dep[300];
	char ydde[300];
	char e0e1[300];
	char t0t1[300];
	char qdet[300];
	char tmst0[300];
	char tmst1[300];
	char cond1[300];
	char cond2[300];
	char cond3[300];
	char cond4[300];

	sprintf(e0t0, "E[0]:Theta[0]>>h1(90,0,90,300,0,90)");
	sprintf(e1t1, "E[1]:Theta[1]>>h2(200,0,20,100,0,80)");
	sprintf(ttcm0, "Thetacm[0]:Theta[0]>>h21(90,0,90,100,0,180)");
	sprintf(ttcm1, "Thetacm[1]:Theta2[1]>>h22(200,0,20,180,0,180)");
	sprintf(s3de, "sd1.dE:sd2.dE>>h3(140,0,70,140,0,7)");
	sprintf(ydde, "yd.dE*cos(yd.fThetaCalc*3.14/180.):csi.dE>>h4(200,0,50,200,0,4)");
	sprintf(qdet, "Qdet>>hq(200,-8,2)");
	sprintf(tmst0, "Theta2[1]-Theta[1]>>hm(200,-20,20)");
	// sprintf(tmst1, "Theta2[1]-Theta[1]:Theta[1]>>hm2(200,0,80,200,-20,20)");
	sprintf(tmst1, "E[1]:Theta2[1]>>hm2(200,0,20,100,0,80)");
	sprintf(e0e1, "E[1]:E[0]>>h1(100,0,100,100,0,100)");
	sprintf(t0t1, "Theta[1]:Theta[0]>>h1(90,0,90,90,0,90)");
 	
	sprintf(cond1, "sd1.dE>0.&&sd2.dE>0.");
 	sprintf(cond2, "yd.dE>0.&&csi.dE>0.");
 	sprintf(cond3, "sd1.dE>0.&&sd2.dE>0.&&yd.dE>0.&&csi.dE>0.");
 	sprintf(cond4, "sd1.dE>0.&&sd2.dE>0.&&yd.dE>0.");

	TCanvas * C1 = new TCanvas("C1","C1",1280,720); C1->Divide(nop,nos);
	TCanvas * Ce0t0 = new TCanvas("Ce0t0","Ce0t0",1280,720); Ce0t0->Divide(2,1);
	TCanvas * Ce1t1 = new TCanvas("Ce1t1","Ce1t1",1280,720); Ce1t1->Divide(2,1);
	TCanvas * Cs3de = new TCanvas("Cs3de","Cs3de",1280,720); Cs3de->Divide(2,1);
	TCanvas * Cttcm = new TCanvas("Cttcm","Cttcm",1280,720); //Cttcm->Divide(2,1);
	TCanvas * Ce0e1 = new TCanvas("Ce0e1","Ce0e1",1280,720); Ce0e1->Divide(2,1);
	TCanvas * Ct0t1 = new TCanvas("Ct0t1","Ct0t1",1280,720); //Ct0t1->Divide(2,1);
	TCanvas * Cydde = new TCanvas("Cydde","Cydde",1280,720);
	TCanvas * Cqdet = new TCanvas("Cqdet","Cqdet",1280,720);
	TCanvas * Ctmst = new TCanvas("Ctmst","Ctmst",1280,720); Ctmst->Divide(2,1);

	TGraph** Ge0t0 = new TGraph*[nos]=NULL; 
	TGraph** Ge1t1 = new TGraph*[nos]=NULL;
	TGraph** Ge0t0d = new TGraph*[nos]=NULL; 
	TGraph** Ge1t1d = new TGraph*[nos]=NULL;
	TGraph** Gttcm0 = new TGraph*[nos]=NULL;
	TGraph** Gttcm1 = new TGraph*[nos]=NULL;
	TGraph** Gs3de = new TGraph*[nos]=NULL;
	TGraph** Gs3dep = new TGraph*[nos]=NULL;
	TGraph** Gydde = new TGraph*[nos]=NULL;
	TGraph** Ge0e1 = new TGraph*[nos]=NULL;
	TGraph** Ge0e1d = new TGraph*[nos]=NULL;
	TGraph** Gt0t1 = new TGraph*[nos]=NULL;
	TGraph** Gt0t1d = new TGraph*[nos]=NULL;
	TGraph** Gtmst1 = new TGraph*[nos]=NULL;
	TH1F** Gqdet = new TH1F*[nos]=NULL;
	TH1F** Gtmst0 = new TH1F*[nos]=NULL;
	TH1F* hq = new TH1F;
	
	TString name[nos];
	name[0] = "4-body";
	name[1] = "pp 0.0 MeV";
	name[2] = "pp 3.1 MeV";
	name[3] = "pp 4.4 MeV";
	name[4] = "pp 6.0 MeV";
	name[5] = "pp 7.2 MeV";
	// name[7] = "pd 0.0 MeV";
	// name[7] = "pd 2.9 MeV";
	// name[8] = "pd 5.8 MeV";
	name[6] = "pt 0.0 MeV";
	name[7] = "pt 1.8 MeV";
	name[8] = "pt 5.6 MeV";

	TString filename[nos];
	filename[0]=Form("~/mholl/simulation/rootfiles/8He_pp_6Henn_0.0_%d_200mm.root",be);
	filename[1]=Form("~/mholl/simulation/rootfiles/8He_pp_8He_0.0_%d_200mm.root",be);
	filename[2]=Form("~/mholl/simulation/rootfiles/8He_pp_8He_3.1_%d_200mm.root",be);
	filename[3]=Form("~/mholl/simulation/rootfiles/8He_pp_8He_4.4_%d_200mm.root",be);
	filename[4]=Form("~/mholl/simulation/rootfiles/8He_pp_8He_6.0_%d_200mm.root",be);
	filename[5]=Form("~/mholl/simulation/rootfiles/8He_pp_8He_7.2_%d_200mm.root",be);
	// filename[7]=Form("~/mholl/simulation/rootfiles/8He_pd_7He_0.0_%d_200mm.root",be);
	// filename[7]=Form("~/mholl/simulation/rootfiles/8He_pd_7He_2.9_%d_200mm.root",be);
	// filename[8]=Form("~/mholl/simulation/rootfiles/8He_pd_7He_5.8_%d_200mm.root",be);
	filename[6]=Form("~/mholl/simulation/rootfiles/8He_pt_6He_0.0_%d_200mm.root",be);
	filename[7]=Form("~/mholl/simulation/rootfiles/8He_pt_6He_1.8_%d_200mm.root",be);
	filename[8]=Form("~/mholl/simulation/rootfiles/8He_pt_6He_5.6_%d_200mm.root",be);

	Int_t col[nos];
	col[0] =800;
	col[1] =632;
	col[2] =633;
	col[3] =634;
	col[4] =635;
	col[5] =636;
	// col[7] =410;
	// col[7] =416;
	// col[8] =419;
	col[6] =594;
	col[7] =600;
	col[8] =603;
	
	for(UInt_t i=0; i<nos; i++)
	{
		TFile *tf0 = new TFile(filename[i].Data(),"READ");
		TTree * tree;
	   	tf0->GetObject("iris",tree);
		if(tree==0){
			printf("File doesn't exist!\n");
			continue;
		}
		printf("\n%s state\n",name[i].Data());
		printf("Acceptance S3:\t%.1lf\n",Double_t(tree->GetEntries(cond1))/Double_t(tree->GetEntries())*100.);	
		printf("Acceptance YY/CsI:\t %.1lf\n",Double_t(tree->GetEntries(cond2))/Double_t(tree->GetEntries())*100.);	
		printf("Total acceptance:\t%.1lf\n\n",Double_t(tree->GetEntries(cond3))/Double_t(tree->GetEntries())*100.);
			
		C1->cd(i*nop+1);
		tree->Draw(e0t0,"");
		Ge0t0[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Ge0t0_%d",i));
		Ge0t0[i]->SetMarkerColor(col[i]);
		Ge0t0[i]->SetMarkerStyle(7);
		Ge0t0[i]->GetXaxis()->SetTitle("#vartheta");
		Ge0t0[i]->GetXaxis()->SetLimits(0,80);
		Ge0t0[i]->GetYaxis()->SetTitle("E [MeV]");
		Ge0t0[i]->GetYaxis()->SetRangeUser(0,30);
	
		C1->cd(i*nop+2);
		tree->Draw(e0t0,cond3);
		if(tree->GetEntries(cond3)>0){
			Ge0t0d[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Ge0t0d_%d",i));
			Ge0t0d[i]->SetMarkerColor(col[i]);
			Ge0t0d[i]->SetMarkerStyle(7);
			Ge0t0d[i]->GetXaxis()->SetTitle("#vartheta");
			Ge0t0d[i]->GetXaxis()->SetLimits(0,80);
			Ge0t0d[i]->GetYaxis()->SetTitle("E [MeV]");
			Ge0t0d[i]->GetYaxis()->SetRangeUser(0,30);
		}
	
		C1->cd(i*nop+3);
		tree->Draw(e1t1,"");
		Ge1t1[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Ge1t1_%d",i));
		Ge1t1[i]->SetMarkerColor(col[i]);
		Ge1t1[i]->SetMarkerStyle(7);	
		Ge1t1[i]->GetXaxis()->SetTitle("#vartheta");
		Ge1t1[i]->GetXaxis()->SetLimits(0,20);
		Ge1t1[i]->GetYaxis()->SetTitle("E MeV");
		Ge1t1[i]->GetYaxis()->SetRangeUser(0,100);

		C1->cd(i*nop+4);
		tree->Draw(e1t1,cond3);
		if(tree->GetEntries(cond3)>0){
			Ge1t1d[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Ge1t1d_%d",i));
			Ge1t1d[i]->SetMarkerColor(col[i]);
			Ge1t1d[i]->SetMarkerStyle(7);	
			Ge1t1d[i]->GetXaxis()->SetTitle("#vartheta");
			Ge1t1d[i]->GetXaxis()->SetLimits(0,20);
			Ge1t1d[i]->GetYaxis()->SetTitle("E [MeV]");
			Ge1t1d[i]->GetYaxis()->SetRangeUser(0,100);
		}

		C1->cd(i*nop+5);
		tree->Draw(qdet,cond3);
		if(tree->GetEntries(cond3)>0){
			Gqdet[i] =(TH1F *) gDirectory->Get("hq");
			Gqdet[i]->SetDirectory(0);
			Gqdet[i]->SetLineColor(col[i]);
			Gqdet[i]->SetLineWidth(3);	
			Gqdet[i]->GetXaxis()->SetTitle("Q [MeV]");
		}
			
		C1->cd(i*nop+6);
		tree->Draw(s3de,cond1,"");
		if(tree->GetEntries(cond1)>0){
			Gs3de[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Gs3de_%d",i));
			Gs3de[i]->SetMarkerColor(col[i]);
			Gs3de[i]->SetMarkerStyle(7);	
			Gs3de[i]->GetXaxis()->SetTitle("#Delta E_{Sd2}");
			Gs3de[i]->GetXaxis()->SetLimits(10,70);
			Gs3de[i]->GetYaxis()->SetTitle("#Delta E_{Sd1}");
			Gs3de[i]->GetYaxis()->SetRangeUser(0,10);
		}

		C1->cd(i*nop+7);
		tree->Draw(s3de,cond3,"");
		if(tree->GetEntries(cond3)>0){
			Gs3dep[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Gs3dep_%d",i));
			Gs3dep[i]->SetMarkerColor(col[i]);
			Gs3dep[i]->SetMarkerStyle(7);	
			Gs3dep[i]->GetXaxis()->SetTitle("#Delta E_{Sd2}");
			Gs3dep[i]->GetXaxis()->SetLimits(10,70);
			Gs3dep[i]->GetYaxis()->SetTitle("#Delta E_{Sd1}");
			Gs3dep[i]->GetYaxis()->SetRangeUser(0,10);
		}
		
		C1->cd(i*nop+8);
		tree->Draw(ydde,cond2,"");
		if(tree->GetEntries(cond2)>0){
			Gydde[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Gydde_%d",i));
			Gydde[i]->SetMarkerColor(col[i]);
			Gydde[i]->SetMarkerStyle(7);	
			Gydde[i]->GetXaxis()->SetTitle("#Delta E_{CsI}");
			Gydde[i]->GetXaxis()->SetLimits(0,50);
			Gydde[i]->GetYaxis()->SetTitle("#Delta E_{YY}#times cos(#vartheta)");
			Gydde[i]->GetYaxis()->SetRangeUser(0,10);
		}
	
		C1->cd(i*nop+9);
		tree->Draw(ttcm0,"");
		if(tree->GetEntries()>0){
			Gttcm0[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Gttcm0_%d",i));
			Gttcm0[i]->SetMarkerColor(col[i]);
			Gttcm0[i]->SetMarkerStyle(7);	
			Gttcm0[i]->GetXaxis()->SetTitle("#vartheta_{lab}");
			Gttcm0[i]->GetXaxis()->SetLimits(0,80);
			Gttcm0[i]->GetYaxis()->SetTitle("#vartheta_{CM}");
			Gttcm0[i]->GetYaxis()->SetRangeUser(0,180);
		}

		C1->cd(i*nop+10);
		tree->Draw(ttcm1,"");
		if(tree->GetEntries()>0){
			Gttcm1[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Gttcm1_%d",i));
			Gttcm1[i]->SetMarkerColor(col[i]);
			Gttcm1[i]->SetMarkerStyle(7);	
			Gttcm1[i]->GetXaxis()->SetTitle("#vartheta_{lab}");
			Gttcm1[i]->GetXaxis()->SetLimits(0,15);
			Gttcm1[i]->GetYaxis()->SetTitle("#vartheta_{CM}");
			Gttcm1[i]->GetYaxis()->SetRangeUser(0,90);
		}
				
		C1->cd(i*nop+11);
		tree->Draw(e0e1,"");
		Ge0e1[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Ge0e1_%d",i));
		Ge0e1[i]->SetMarkerColor(col[i]);
		Ge0e1[i]->SetMarkerStyle(7);
		Ge0e1[i]->GetXaxis()->SetTitle("E [MeV]");
		Ge0e1[i]->GetXaxis()->SetLimits(0,30);
		Ge0e1[i]->GetYaxis()->SetTitle("E [MeV]");
		Ge0e1[i]->GetYaxis()->SetRangeUser(0,100);

		C1->cd(i*nop+12);
		tree->Draw(e0e1,cond3);
		if(tree->GetEntries(cond3)>0){
			Ge0e1d[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Ge0e1d_%d",i));
			Ge0e1d[i]->SetMarkerColor(col[i]);
			Ge0e1d[i]->SetMarkerStyle(7);
			Ge0e1d[i]->GetXaxis()->SetTitle("E [MeV]");
			Ge0e1d[i]->GetXaxis()->SetLimits(0,30);
			Ge0e1d[i]->GetYaxis()->SetTitle("E [MeV]");
			Ge0e1d[i]->GetYaxis()->SetRangeUser(0,100);
		}

		C1->cd(i*nop+13);
		tree->Draw(t0t1,"");
		Gt0t1[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Gt0t1_%d",i));
		Gt0t1[i]->SetMarkerColor(col[i]);
		Gt0t1[i]->SetMarkerStyle(7);
		Gt0t1[i]->GetXaxis()->SetTitle("#vartheta");
		Gt0t1[i]->GetXaxis()->SetLimits(0,80);
		Gt0t1[i]->GetYaxis()->SetTitle("#vartheta");
		Gt0t1[i]->GetYaxis()->SetRangeUser(0,30);
	
		C1->cd(i*nop+14);
		tree->Draw(t0t1,cond3);
		if(tree->GetEntries(cond3)>0){
			Gt0t1d[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Gt0t1d_%d",i));
			Gt0t1d[i]->SetMarkerColor(col[i]);
			Gt0t1d[i]->SetMarkerStyle(7);
			Gt0t1d[i]->GetXaxis()->SetTitle("#vartheta");
			Gt0t1d[i]->GetXaxis()->SetLimits(0,80);
			Gt0t1d[i]->GetYaxis()->SetTitle("#vartheta");
			Gt0t1d[i]->GetYaxis()->SetRangeUser(0,30);
		}

		C1->cd(i*nop+15);
		tree->Draw(tmst0,"","");
		if(tree->GetEntries()>0){
			Gtmst0[i] =(TH1F *) gDirectory->Get("hm");
			Gtmst0[i]->SetDirectory(0);
			Gtmst0[i]->SetLineColor(col[i]);
			Gtmst0[i]->SetLineWidth(3);	
			Gtmst0[i]->GetXaxis()->SetTitle("#vartheta_{dec}-#vartheta_{rct}");
		}
	
		C1->cd(i*nop+16);
		tree->Draw(tmst1,cond3);
		if(tree->GetEntries(cond3)>0){
			Gtmst1[i] = (TGraph*)gPad->GetPrimitive("Graph")->Clone(Form("Gtmst1_%d",i));
			Gtmst1[i]->SetMarkerColor(col[i]);
			Gtmst1[i]->SetMarkerStyle(7);
			Gtmst1[i]->GetXaxis()->SetTitle("#vartheta");
			Gtmst1[i]->GetXaxis()->SetLimits(0,20);
			Gtmst1[i]->GetYaxis()->SetTitle("E [MeV]");
			Gtmst1[i]->GetYaxis()->SetRangeUser(0,100);
		}
		
		tf0->Close();
	}

	Ce0t0->cd(1);
	TLegend *LCe0t0 = new TLegend(0.75, 0.75, 0.9,0.9, "kinematic curves p");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Ge0t0[i])
		{
			if(i==0) Ge0t0[i]->Draw("AP");
			else Ge0t0[i]->Draw("P,same");
    	    LCe0t0->AddEntry(Ge0t0[i], name[i].Data(), "p");
		}
	}
	LCe0t0->SetFillColor(kWhite);
    LCe0t0->Draw();

	Ce0t0->cd(2);
	TLegend *LCe0t0d = new TLegend(0.75, 0.75, 0.9,0.9, "kinematic curves p");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Ge0t0d[i])
		{
			if(i==0) Ge0t0d[i]->Draw("AP");
			else Ge0t0d[i]->Draw("P,same");
    	    LCe0t0d->AddEntry(Ge0t0d[i], name[i].Data(), "p");
		}
	}
	LCe0t0d->SetFillColor(kWhite);
    LCe0t0d->Draw();

	Ce1t1->cd(1);
	TLegend *LCe1t1 = new TLegend(0.75, 0.75, 0.9,0.9, "kinematic curves Ion");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Ge1t1[i])
		{
			if(i==0) Ge1t1[i]->Draw("AP");
			else Ge1t1[i]->Draw("P,same");
    	    LCe1t1->AddEntry(Ge1t1[i], name[i].Data(), "p");
		}
	}
	LCe1t1->SetFillColor(kWhite);
    LCe1t1->Draw();

	Ce1t1->cd(2);
	TLegend *LCe1t1d = new TLegend(0.75, 0.75, 0.9,0.9, "kinematic curves Ion");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Ge1t1d[i])
		{
			if(i==0) Ge1t1d[i]->Draw("AP");
			else Ge1t1d[i]->Draw("P,same");
    	    LCe1t1d->AddEntry(Ge1t1d[i], name[i].Data(), "p");
		}
	}
	LCe1t1d->SetFillColor(kWhite);
    LCe1t1d->Draw();

	Cs3de->cd(1);
	TLegend *LCs3de = new TLegend(0.75, 0.75, 0.9,0.9, "S3 dE vs E");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Gs3de[i])
		{
			if(i==0) Gs3de[i]->Draw("AP");
			else Gs3de[i]->Draw("P,same");
        	LCs3de->AddEntry(Gs3de[i], name[i].Data(), "p");
		}
	}
	LCs3de->SetFillColor(kWhite);
    LCs3de->Draw();

	Cs3de->cd(2);
	TLegend *LCs3dep = new TLegend(0.75, 0.75, 0.9,0.9, "S3 dE vs E");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Gs3dep[i])
		{
			if(i==0) Gs3dep[i]->Draw("AP");
			else Gs3dep[i]->Draw("P,same");
    	    LCs3dep->AddEntry(Gs3dep[i], name[i].Data(), "p");
		}
	}
	LCs3dep->SetFillColor(kWhite);
    LCs3dep->Draw();

	//Cttcm->cd(1);
	Cttcm->cd();
	TLegend *LCttcm0 = new TLegend(0.75, 0.75, 0.9,0.9, "cm vs lab");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Gttcm0[i])
		{
			if(i==0) Gttcm0[i]->Draw("AP");
			else Gttcm0[i]->Draw("P,same");
        	LCttcm0->AddEntry(Gttcm0[i], name[i].Data(), "p");
		}
	}
	TF1 *ftmin = new TF1("ftmin","atan(50/x)*180./TMath::Pi()",0,90);
	ftmin->Draw("same");
	TF1 *ftmax = new TF1("ftmax","atan(130/x)*180./TMath::Pi()",0,90);
	ftmax->Draw("same");
	LCttcm0->SetFillColor(kWhite);
    LCttcm0->Draw();

	// Cttcm->cd(2);
	// TLegend *LCttcm1 = new TLegend(0.75, 0.75, 0.9,0.9, "cm vs lab");
	// for(UInt_t i=0; i<nos; i++)
	// {
	// 	if(Gttcm1[i])
	// 	{
	// 		if(i==0) Gttcm1[i]->Draw("AP");
	// 		else Gttcm1[i]->Draw("P,same");
    // 	    LCttcm1->AddEntry(Gttcm1[i], name[i].Data(), "p");
	// 	}
	// }
	// LCttcm1->SetFillColor(kWhite);
    // LCttcm1->Draw();

	Cydde->cd();
	TLegend *LCydde = new TLegend(0.75, 0.75, 0.9,0.9,"Proton ID");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Gydde[i])
		{
			if(i==0) Gydde[i]->Draw("AP");
			else Gydde[i]->Draw("P,same");
    	    LCydde->AddEntry(Gydde[i], name[i].Data(), "p");
		}
	}
	LCydde->SetFillColor(kWhite);
    LCydde->Draw();

	Ce0e1->cd(1);
	TLegend *LCe0e1 = new TLegend(0.75, 0.75, 0.9,0.9, "e vs e");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Ge0e1[i])
		{
			if(i==0) Ge0e1[i]->Draw("AP");
			else Ge0e1[i]->Draw("P,same");
    	    LCe0e1->AddEntry(Ge0e1[i], name[i].Data(), "p");
		}
	}
	LCe0e1->SetFillColor(kWhite);
    LCe0e1->Draw();

	Ce0e1->cd(2);
	TLegend *LCe0e1d = new TLegend(0.75, 0.75, 0.9,0.9, "e vs e");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Ge0e1d[i])
		{
			if(i==0) Ge0e1d[i]->Draw("AP");
			else Ge0e1d[i]->Draw("P,same");
    	    LCe0e1d->AddEntry(Ge0e1d[i], name[i].Data(), "p");
		}
	}
	LCe0e1d->SetFillColor(kWhite);
    LCe0e1d->Draw();

	// Ct0t1->cd(1);
	Ct0t1->cd();
	TLegend *LCt0t1 = new TLegend(0.75, 0.75, 0.9,0.9, "#vartheta vs #vartheta");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Gt0t1[i])
		{
			if(i==0) Gt0t1[i]->Draw("AP");
			else Gt0t1[i]->Draw("P,same");
    	    LCt0t1->AddEntry(Gt0t1[i], name[i].Data(), "p");
		}
	}
	LCt0t1->SetFillColor(kWhite);
    LCt0t1->Draw();

//	Ct0t1->cd(2);
//	TLegend *LCt0t1d = new TLegend(0.75, 0.75, 0.9,0.9, "#vartheta vs #vartheta");
//	for(UInt_t i=0; i<nos; i++)
//	{
//		if(Gt0t1d[i])
//		{
//			if(i==0) Gt0t1d[i]->Draw("AP");
//			else Gt0t1d[i]->Draw("P,same");
//    	    LCt0t1d->AddEntry(Gt0t1d[i], name[i].Data(), "p");
//		}
//	}
//	LCt0t1d->SetFillColor(kWhite);
//    LCt0t1d->Draw();

	Cqdet->cd();
	TLegend *LCqdet = new TLegend(0.75, 0.75, 0.9,0.9,"Q-value");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Gqdet[i])
		{
			if(i==0) Gqdet[i]->Draw();
			else Gqdet[i]->Draw("same");
    	    LCqdet->AddEntry(Gqdet[i], name[i].Data(), "l");
		}
	}
	LCqdet->SetFillColor(kWhite);
    LCqdet->Draw();

	Ctmst->cd(1);
	TLegend *LCtmst0 = new TLegend(0.75, 0.75, 0.9,0.9,"#Delta #vartheta");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Gtmst0[i])
		{
			if(i==0) Gtmst0[i]->Draw();
			else Gtmst0[i]->Draw("same");
    	    LCtmst0->AddEntry(Gtmst0[i], name[i].Data(), "l");
		}
	}
	LCtmst0->SetFillColor(kWhite);
    LCtmst0->Draw();

	Ctmst->cd(2);
	TLegend *LCtmst1 = new TLegend(0.75, 0.75, 0.9,0.9, "#Delta#vartheta vs #vartheta");
	for(UInt_t i=0; i<nos; i++)
	{
		if(Gtmst1[i])
		{
			if(i==0) Gtmst1[i]->Draw("AP");
			else Gtmst1[i]->Draw("P,same");
    	    LCtmst1->AddEntry(Gt0t1d[i], name[i].Data(), "p");
		}
	}
	LCtmst1->SetFillColor(kWhite);
    LCtmst1->Draw();


	printf("Saving to file...\n");
	TFile* outf = new TFile(Form("plots/8He_pp_8He_%d.root",be),"RECREATE");

	for(UInt_t j=0; j<nos; j++)
	{	
		if(Ge0t0[j]) Ge0t0[j]->Write(); 
		if(Ge1t1[j]) Ge1t1[j]->Write();
		if(Gs3de[j]) Gs3de[j]->Write();
		if(Gs3dep[j]) Gs3dep[j]->Write();
		if(Gydde[j]) Gydde[j]->Write();
		if(Gqdet[j]) Gqdet[j]->Write();
		if(Gtmst0[j]) Gtmst0[j]->Write();
		if(Gtmst1[j]) Gtmst1[j]->Write();
		if(Ge0t0d[j]) Ge0t0d[j]->Write(); 
		if(Ge1t1d[j]) Ge1t1d[j]->Write(); 
		if(Ge0e1[j]) Ge0e1[j]->Write(); 
		if(Ge0e1d[j]) Ge0e1d[j]->Write(); 
		if(Gt0t1[j]) Gt0t1[j]->Write(); 
		if(Gt0t1d[j]) Gt0t1d[j]->Write(); 
		if(Gttcm0[j]) Gttcm0[j]->Write(); 
	}
	C1->Write();
	Ce0t0->Write();
	Ce1t1->Write();
	Cs3de->Write();
	Cttcm->Write();
	Cydde->Write();
	Ce0e1->Write();
	Ct0t1->Write();
	Cqdet->Write();
	Ctmst->Write();
	outf->Close();

	return;
}

